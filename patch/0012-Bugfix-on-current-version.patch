From 5923acebfc4af0c79fb5df9eaf49384232514f95 Mon Sep 17 00:00:00 2001
From: MartinChoo <214582617@qq.com>
Date: Wed, 23 Jul 2025 21:22:02 +0800
Subject: [PATCH] Bugfix on current version

---
 src/sqlite3.c | 281 +++++++++++++++++++++++++++++++++++++++++---------
 1 file changed, 230 insertions(+), 51 deletions(-)

diff --git a/src/sqlite3.c b/src/sqlite3.c
index 2953517..2cc9b8f 100644
--- a/src/sqlite3.c
+++ b/src/sqlite3.c
@@ -15050,6 +15050,14 @@ typedef INT16_TYPE LogEst;
 #define LARGEST_UINT64 (0xffffffff|(((u64)0xffffffff)<<32))
 #define SMALLEST_INT64 (((i64)-1) - LARGEST_INT64)
 
+/*
+** Macro SMXV(n) return the maximum value that can be held in variable n,
+** assuming n is a signed integer type.  UMXV(n) is similar for unsigned
+** integer types.
+*/
+#define SMXV(n) ((((i64)1)<<(sizeof(n)*8-1))-1)
+#define UMXV(n) ((((i64)1)<<(sizeof(n)*8))-1)
+
 /*
 ** Round up a number to the next larger multiple of 8.  This is used
 ** to force 8-byte alignment on 64-bit architectures.
@@ -19061,7 +19069,7 @@ struct AggInfo {
                           ** from source tables rather than from accumulators */
   u8 useSortingIdx;       /* In direct mode, reference the sorting index rather
                           ** than the source table */
-  u16 nSortingColumn;     /* Number of columns in the sorting index */
+  u32 nSortingColumn;     /* Number of columns in the sorting index */
   int sortingIdx;         /* Cursor number of the sorting index */
   int sortingIdxPTab;     /* Cursor number of pseudo-table */
   int iFirstReg;          /* First register in range for aCol[] and aFunc[] */
@@ -19070,8 +19078,8 @@ struct AggInfo {
     Table *pTab;             /* Source table */
     Expr *pCExpr;            /* The original expression */
     int iTable;              /* Cursor number of the source table */
-    i16 iColumn;             /* Column number within the source table */
-    i16 iSorterColumn;       /* Column number in the sorting index */
+    int iColumn;             /* Column number within the source table */
+    int iSorterColumn;       /* Column number in the sorting index */
   } *aCol;
   int nColumn;            /* Number of used entries in aCol[] */
   int nAccumulator;       /* Number of columns that show through to the output.
@@ -38805,8 +38813,8 @@ static void enableDbFileDelMonitor(int32_t fd)
     }
     flags |= HMFS_MONITOR_FL;
     ret = ioctl(fd, HMFS_IOCTL_HW_SET_FLAGS, &flags);
-    if (ret < 0) {
-        sqlite3_log(SQLITE_WARNING, "Fd %d enable del monitor go wrong, errno = %d", fd, errno);
+    if (ret < 0 && errno != EACCES) {
+        sqlite3_log(SQLITE_WARNING, "Flags %u fd %d enable del monitor go wrong, errno = %d", flags, fd, errno);
     }
 }
 
@@ -57976,6 +57984,8 @@ static void MetaDwrCheckVacuum(BtShared *pBt);
 static int MetaDwrRecoverAndBeginTran(Btree *pBt, int wrflag, int *pSchemaVersion);
 static int MetaDwrOpenAndCheck(Btree *pBt);
 static void MetaDwrDisable(Btree *pBt);
+static void MetaDwrDumpInfo(Pager *pPager);
+static void MetaDwrCommitUpdate(Pager *pPager);
 #define META_HEADER_CHANGED 1
 #define META_SCHEMA_CHANGED 2
 #define META_IN_RECOVERY 1
@@ -59754,11 +59764,12 @@ static int pager_end_transaction(Pager *pPager, int hasSuper, int bCommit){
     sqlite3PcacheTruncate(pPager->pPCache, pPager->dbSize);
   }
 #ifdef SQLITE_META_DWR
-  if (bCommit && pPager->metaChanged != 0) {
-    sqlite3BeginBenignMalloc();
-    (void)MetaDwrWriteHeader(pPager, pPager->metaHdr);
-    sqlite3EndBenignMalloc();
-    pPager->metaChanged = 0;
+  if (bCommit) {
+    MetaDwrCommitUpdate(pPager);
+    if (pPager->metaChanged != 0) {
+      (void)MetaDwrWriteHeader(pPager, pPager->metaHdr);
+      pPager->metaChanged = 0;
+    }
   }
 #endif
   if( pagerUseWal(pPager) ){
@@ -73773,7 +73784,13 @@ static void zeroPage(MemPage *pPage, int flags){
   data[hdr+7] = 0;
   put2byte(&data[hdr+5], pBt->usableSize);
   pPage->nFree = (u16)(pBt->usableSize - first);
-  decodeFlags(pPage, flags);
+  /*
+  ** pPage might not be a btree page, it might be ovf/ptrmap/free page
+  ** and decodeFlags() return SQLITE_CORRUPT, but no harm is done by this
+  */
+  if( decodeFlags(pPage, flags)==SQLITE_CORRUPT ){
+    sqlite3_log(SQLITE_WARNING_DUMP, "warn: zero page, might be ovf/ptrmap/free page:%d", pPage->pgno);
+  }
   pPage->cellOffset = first;
   pPage->aDataEnd = &data[pBt->pageSize];
   pPage->aCellIdx = &data[first];
@@ -73982,7 +73999,9 @@ static void pageReinit(DbPage *pData){
       ** But no harm is done by this.  And it is very important that
       ** btreeInitPage() be called on every btree page so we make
       ** the call for every page that comes in for re-initializing. */
-      btreeInitPage(pPage);
+      if( btreeInitPage(pPage)==SQLITE_CORRUPT ){
+        sqlite3_log(SQLITE_WARNING_DUMP, "warn: page reinit, might be ovf/ptrmap/free page:%d", pPage->pgno);
+      }
     }
   }
 }
@@ -74898,6 +74917,11 @@ static int lockBtree(BtShared *pBt){
     }
     if( nPage>nPageFile ){
       if( sqlite3WritableSchema(pBt->db)==0 ){
+        sqlite3_log(SQLITE_WARNING_DUMP, "sqlite3WritableSchema nPage %d nPageFile %d", nPage, nPageFile);
+#ifdef SQLITE_META_DWR
+        DumpLocksByPager(pBt->pPager);
+        MetaDwrDumpInfo(pBt->pPager);
+#endif
         rc = SQLITE_CORRUPT_BKPT;
         goto page1_init_failed;
       }else{
@@ -116854,7 +116878,9 @@ static void findOrCreateAggInfoColumn(
 ){
   struct AggInfo_col *pCol;
   int k;
+  int mxTerm = pParse->db->aLimit[SQLITE_LIMIT_COLUMN];
 
+  assert( mxTerm <= SMXV(i16) );
   assert( pAggInfo->iFirstReg==0 );
   pCol = pAggInfo->aCol;
   for(k=0; k<pAggInfo->nColumn; k++, pCol++){
@@ -116872,6 +116898,10 @@ static void findOrCreateAggInfoColumn(
     assert( pParse->db->mallocFailed );
     return;
   }
+  if( k>mxTerm ){
+    sqlite3ErrorMsg(pParse, "more than %d aggregate terms", mxTerm);
+    k = mxTerm;
+  }
   pCol = &pAggInfo->aCol[k];
   assert( ExprUseYTab(pExpr) );
   pCol->pTab = pExpr->y.pTab;
@@ -116905,6 +116935,7 @@ fix_up_expr:
   if( pExpr->op==TK_COLUMN ){
     pExpr->op = TK_AGG_COLUMN;
   }
+  assert( k <= SMXV(pExpr->iAgg) );
   pExpr->iAgg = (i16)k;
 }
 
@@ -116988,13 +117019,19 @@ static int analyzeAggregate(Walker *pWalker, Expr *pExpr){
         ** function that is already in the pAggInfo structure
         */
         struct AggInfo_func *pItem = pAggInfo->aFunc;
+        int mxTerm = pParse->db->aLimit[SQLITE_LIMIT_COLUMN];
+        assert( mxTerm <= SMXV(i16) );
         for(i=0; i<pAggInfo->nFunc; i++, pItem++){
           if( pItem->pFExpr==pExpr ) break;
           if( sqlite3ExprCompare(0, pItem->pFExpr, pExpr, -1)==0 ){
             break;
           }
         }
-        if( i>=pAggInfo->nFunc ){
+        if( i>mxTerm ){
+          sqlite3ErrorMsg(pParse, "more than %d aggregate terms", mxTerm);
+          i = mxTerm;
+          assert( i<pAggInfo->nFunc );
+        }else if( i>=pAggInfo->nFunc ){
           /* pExpr is original.  Make a new entry in pAggInfo->aFunc[]
           */
           u8 enc = ENC(pParse->db);
@@ -117046,6 +117083,7 @@ static int analyzeAggregate(Walker *pWalker, Expr *pExpr){
         */
         assert( !ExprHasProperty(pExpr, EP_TokenOnly|EP_Reduced) );
         ExprSetVVAProperty(pExpr, EP_NoReduce);
+        assert( i <= SMXV(pExpr->iAgg) );
         pExpr->iAgg = (i16)i;
         pExpr->pAggInfo = pAggInfo;
         return WRC_Prune;
@@ -121758,8 +121796,8 @@ static void attachFunc(
   if( rc==SQLITE_OK ){
     extern int sqlite3CodecAttach(sqlite3*, int, const void*, int);
     extern void sqlite3CodecGetKey(sqlite3*, int, void**, int*);
-    int nKey;
-    char *zKey;
+    int nKey = 0;
+    char *zKey = NULL;
     int t = sqlite3_value_type(argv[2]);
     switch( t ){
       case SQLITE_INTEGER:
@@ -121776,14 +121814,7 @@ static void attachFunc(
         break;
 
       case SQLITE_NULL:
-        /* No key specified.  Use the key from URI filename, or if none,
-        ** use the key from the main database. */
-        if( sqlite3CodecQueryParameters(db, zName, zPath)==0 ){
-          sqlite3CodecGetKey(db, 0, (void**)&zKey, &nKey);
-          if( nKey || sqlite3BtreeGetRequestedReserve(db->aDb[0].pBt)>0 ){
-            rc = sqlite3CodecAttach(db, db->nDb-1, zKey, nKey);
-          }
-        }
+        /* No key specified. just use null key. */
         break;
     }
   }
@@ -184151,10 +184182,12 @@ opendb_out:
     db->eOpenState = SQLITE_STATE_SICK;
   }
 #ifdef SQLITE_ENABLE_DROPTABLE_CALLBACK
-  db->isDropTable = 0;
-  db->mDropTableName = NULL;
-  db->mDropSchemaName = NULL;
-  db->xDropTableHandle = NULL;
+  if( db!=0 ){
+    db->isDropTable = 0;
+    db->mDropTableName = NULL;
+    db->mDropSchemaName = NULL;
+    db->xDropTableHandle = NULL;
+  }
 #endif /* SQLITE_ENABLE_DROPTABLE_CALLBACK */
 #ifdef SQLITE_ENABLE_BINLOG
   sqlite3BinlogReset(db);
@@ -204600,6 +204633,39 @@ static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){
   return rc;
 }
 
+/*
+** Expression node pExpr is an MSR phrase. This function restarts pExpr
+** so that it is a regular phrase query, not an MSR. SQLITE_OK is returned
+** if successful, or an SQLite error code otherwise.
+*/
+int sqlite3Fts3MsrCancel(Fts3Cursor *pCsr, Fts3Expr *pExpr){
+  int rc = SQLITE_OK;
+  if( pExpr->bEof==0 ){
+    i64 iDocid = pExpr->iDocid;
+    fts3EvalRestart(pCsr, pExpr, &rc);
+    while( rc==SQLITE_OK && pExpr->iDocid!=iDocid ){
+      fts3EvalNextRow(pCsr, pExpr, &rc);
+      if( pExpr->bEof ) rc = FTS_CORRUPT_VTAB;
+    }
+  }
+  return rc;
+}
+
+/*
+** If expression pExpr is a phrase expression that uses an MSR query,
+** restart it as a regular, non-incremental query. Return SQLITE_OK
+** if successful, or an SQLite error code otherwise.
+*/
+static int fts3ExprRestartIfCb(Fts3Expr *pExpr, int iPhrase, void *ctx){
+  TermOffsetCtx *p = (TermOffsetCtx*)ctx;
+  int rc = SQLITE_OK;
+  if( pExpr->pPhrase && pExpr->pPhrase->bIncr ){
+    rc = sqlite3Fts3MsrCancel(p->pCsr, pExpr);
+    pExpr->pPhrase->bIncr = 0;
+  }
+  return rc;
+}
+
 /*
 ** Implementation of offsets() function.
 */
@@ -204636,6 +204702,12 @@ SQLITE_PRIVATE void sqlite3Fts3Offsets(
   sCtx.iDocid = pCsr->iPrevId;
   sCtx.pCsr = pCsr;
 
+  /* If a query restart will be required, do it here, rather than later of
+  ** after pointers to poslist buffers that may be invalidated by a restart
+  ** have been saved.  */
+  rc = sqlite3Fts3ExprIterate(pCsr->pExpr, fts3ExprRestartIfCb, (void*)&sCtx);
+  if( rc!=SQLITE_OK ) goto offsets_out;
+
   /* Loop through the table columns, appending offset information to
   ** string-buffer res for each column.
   */
@@ -254823,6 +254895,21 @@ SQLITE_API int sqlite3_stmt_init(
 SQLITE_API const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }
 /************************** End of sqlite3.c ******************************/
 
+#if SQLITE_OS_UNIX
+#include <unistd.h>
+#include <sys/syscall.h>
+static inline int OsGetTid(void)
+{
+#if defined(__linux__)
+    return (int)syscall(__NR_gettid);
+#elif defined(__APPLE__)
+    return (int)syscall(SYS_thread_selfid);
+#else
+    return 0;
+#endif
+}
+#endif
+
 #ifdef SQLITE_CKSUMVFS_STATIC
 extern sqlite3_file *cksmvfsGetOrigFile(sqlite3_file *file);
 #else
@@ -256060,6 +256147,7 @@ int sqlite3CodecAttach(sqlite3* db, int nDb, const void *pKey, int nKey){
     }
   }
 #endif
+  p->pBt->btsFlags &= ~BTS_PAGESIZE_FIXED;
 #ifdef SQLITE_CODEC_ATTACH_CHANGED
   int rc = sqlite3CodecInitContext(ctx, p, pKey, nKey, nDb);
 #else
@@ -256636,7 +256724,12 @@ typedef struct MetaDwrHdr {
   u32 pageSz;
   u32 pageCnt;
   u64 dbFileInode;
-  u32 reserved[12];
+  u64 walShmFileIno;
+  u64 updateTimeStamp;
+  int updateTid;
+  int updatePid;
+  u32 walFrameCksum[2];
+  u32 reserved[4];
   u32 checkSum;
   u8 *zones;
   Pgno *pages;
@@ -256991,6 +257084,87 @@ static inline u64 CaculateMetaDwrWriteOffset(int pageSz, u32 idx, u8 zone) {
   return META_DWR_HEADER_PAGE_SIZE + pageSz * (idx * 2 + zone);
 }
 
+static void MetaDwrDumpInfo(Pager *pPager)
+{
+  MetaDwrHdr *hdr = pPager->metaHdr;
+  if (hdr != NULL) {
+    sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr dbSize %u mxFrameInWal %u dbIno %lu walShmIno %lu",
+      hdr->dbSize, hdr->mxFrameInWal, hdr->dbFileInode, hdr->walShmFileIno);
+    sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr updatestamp %ld updatetid %d updatepid %d",
+      hdr->updateTimeStamp, hdr->updateTid, hdr->updatePid);
+    sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr ckSum0 %u ckSum1 %u", hdr->walFrameCksum[0], hdr->walFrameCksum[1]);
+  }
+#ifndef SQLITE_OMIT_WAL
+  if (!pagerUseWal(pPager)) {
+    sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr ignore dump wal info");
+    return;
+  }
+  WalIndexHdr *pWalHdr = &pPager->pWal->hdr;
+  sqlite3_log(SQLITE_WARNING_DUMP, "wal ckSum0 %u ckSum1 %u maxFram %u nPage %u", pWalHdr->aFrameCksum[0],
+    pWalHdr->aFrameCksum[1], pWalHdr->mxFrame, pWalHdr->nPage);
+#if SQLITE_OS_UNIX
+  if (hdr == NULL || !hdr->checkFileId) {
+    return;
+  }
+  unixFile *fd = (unixFile *)pPager->fd;
+  if (fd == NULL || fd->pInode == NULL) {
+    sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr dump invalid db fd");
+    return;
+  }
+  if (fd->pShm == NULL || fd->pShm->pShmNode == NULL || fd->pShm->pShmNode->hShm < 0) {
+    sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr dump invalid shm fd");
+    return;
+  }
+  struct stat sStat;
+  if (osFstat(fd->pShm->pShmNode->hShm, &sStat)) {
+    sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr dump shm stat go wrong %d", errno);
+    return;
+  }
+  sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr shm ino %lld", (i64)sStat.st_ino);
+#endif
+#endif
+}
+
+static void MetaDwrCommitUpdate(Pager *pPager)
+{
+#if SQLITE_OS_UNIX
+  MetaDwrHdr *hdr = pPager->metaHdr;
+  if (hdr == NULL) {
+    return;
+  }
+  hdr->updateTid = OsGetTid();
+  hdr->updatePid = osGetpid();
+  struct timeval time;
+  gettimeofday(&time, NULL);
+  hdr->updateTimeStamp = time.tv_sec * 1000 + time.tv_usec / 1000;
+#ifndef SQLITE_OMIT_WAL
+  if (pagerUseWal(pPager)) {
+    WalIndexHdr *pWalHdr = &pPager->pWal->hdr;
+    if (pWalHdr->isInit) {
+      hdr->walFrameCksum[0] = pWalHdr->aFrameCksum[0];
+      hdr->walFrameCksum[1] = pWalHdr->aFrameCksum[1];
+    }
+  }
+#endif
+#if !defined(NDEBUG)
+  if (!hdr->checkFileId) {
+    return;
+  }
+  if (fd == NULL || fd->pShm == NULL || fd->pShm->pShmNode == NULL || fd->pShm->pShmNode->hShm < 0) {
+    sqlite3_log(SQLITE_WARNING_DUMP, "update meta header invalid shm fd");
+    return;
+  }
+  struct stat sStat;
+  if (osFstat(fd->pShm->pShmNode->hShm, &sStat)) {
+    hdr->walShmFileIno = 0;
+    sqlite3_log(SQLITE_WARNING_DUMP, "update meta header stat go wrong %d", errno);
+    return;
+  }
+  hdr->walShmFileIno = sStat.st_ino;
+#endif
+#endif
+}
+
 static void MetaDwrUpdateHeaderDbInfo(BtShared *pBt) {
   MetaDwrHdr *hdr = pBt->pPager->metaHdr;
   // 28 offset: dbSize, freelist pageNo, freelist pages count, schema cookie
@@ -257211,11 +257385,12 @@ static int MetaDwrOpenFile(Pager *pPager, u8 openCreate) {
   if (pPager->metaMapPage == NULL) {
     sqlite3_int64 sz = META_DWR_HEADER_PAGE_SIZE;
     sqlite3OsFileControlHint(metaFd, SQLITE_FCNTL_CHUNK_SIZE, &sz);
-    sqlite3OsFileControlHint(metaFd, SQLITE_FCNTL_SIZE_HINT, &sz);
-    void *page = osMmap(0, META_DWR_HEADER_PAGE_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED,
-                        ((unixFile *)metaFd)->h, 0);
-    if (page != MAP_FAILED) {
-      pPager->metaMapPage = page;
+    if (sqlite3OsFileControl(metaFd, SQLITE_FCNTL_SIZE_HINT, &sz) == SQLITE_OK) {
+      void *page = osMmap(0, META_DWR_HEADER_PAGE_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED,
+                          ((unixFile *)metaFd)->h, 0);
+      if (page != MAP_FAILED) {
+        pPager->metaMapPage = page;
+      }
     }
   }
 #endif /* SQLITE_OS_UNIX */
@@ -257589,7 +257764,7 @@ CHK_RESTORE_OUT:
   return rc;
 }
 
-static inline u8 IsConnectionValidForCheck(Pager *pPager)
+static inline u8 IsOnlyOneConnection(Pager *pPager)
 {
 #if SQLITE_OS_UNIX
   u8 checkFileId = Sqlite3GetCheckFileId(pPager->pVfs);
@@ -257597,10 +257772,18 @@ static inline u8 IsConnectionValidForCheck(Pager *pPager)
     return 0;
   }
   unixFile *fd = Sqlite3GetUnixFile(pPager->fd, checkFileId);
+  if (fd == NULL || fd->pInode == NULL) {
+    sqlite3_log(SQLITE_WARNING_DUMP, "Check connection go wrong");
+    return 0;
+  }
+  unixInodeInfo *pInode = fd->pInode;
+  sqlite3_mutex_enter(pInode->pLockMutex);
   // unix and only one connection exist
-  if (fd == NULL || fd->pInode == NULL || fd->pInode->nRef != (checkFileId==SQLITE_CHECK_FILE_ID_COMPRESS ? 2 : 1)) {
+  if (pInode->nRef != (checkFileId==SQLITE_CHECK_FILE_ID_COMPRESS ? 2 : 1)) {
+    sqlite3_mutex_leave(pInode->pLockMutex);
     return 0;
   }
+  sqlite3_mutex_leave(pInode->pLockMutex);
   return 1;
 #else
   return 0;
@@ -257610,7 +257793,7 @@ static inline u8 IsConnectionValidForCheck(Pager *pPager)
 static int MetaDwrOpenAndCheck(Btree *pBt)
 {
   Pager *pPager = pBt->pBt->pPager;
-  if (pPager->memDb || pPager->readOnly || !IsConnectionValidForCheck(pPager)) {
+  if (pPager->memDb || pPager->readOnly || !IsOnlyOneConnection(pPager)) {
     return SQLITE_OK;
   }
 #ifdef SQLITE_HAS_CODEC
@@ -257655,7 +257838,7 @@ DWR_OPEN_OUT:
 static void MetaDwrDisable(Btree *pBt)
 {
   Pager *pPager = pBt->pBt->pPager;
-  if (pPager->metaFd == NULL || pPager->memDb || pPager->readOnly || !IsConnectionValidForCheck(pPager)) {
+  if (pPager->metaFd == NULL || pPager->memDb || pPager->readOnly || !IsOnlyOneConnection(pPager)) {
     return;
   }
 #ifdef SQLITE_HAS_CODEC
@@ -257681,19 +257864,6 @@ static void MetaDwrDisable(Btree *pBt)
 #endif /* SQLITE_META_DWR */
 
 #if SQLITE_OS_UNIX
-#include <unistd.h>
-#include <sys/syscall.h>
-static inline int OsGetTid(void)
-{
-#if defined(__linux__)
-    return (int)syscall(__NR_gettid);
-#elif defined(__APPLE__)
-    return (int)syscall(SYS_thread_selfid);
-#else
-    return 0;
-#endif
-}
-
 static void ResetLockStatus(void)
 {
   (void)memset(&g_lockStatus, 0, sizeof(g_lockStatus));
@@ -257797,8 +257967,13 @@ static inline const char *FlockToName(int l_type)
 
 static int DumpProcessLocks(int fd, struct flock *lock, const char *lockName, char *dumpBuf, int bufLen)
 {
+#ifdef F_OFD_GETLK
+  int lkType = F_OFD_GETLK;
+#else
+  int lkType = F_GETLK;
+#endif
   dumpBuf[0] = '\0';
-  if (osFcntl(fd, F_GETLK, lock) != SQLITE_OK) {
+  if (osFcntl(fd, lkType, lock) != SQLITE_OK) {
     sqlite3_log(SQLITE_ERROR, "[SQLite]Get wal file lock ofs %u failed, errno: %d", lock->l_start, errno);
     return 0;
   }
@@ -259041,7 +259216,11 @@ struct sqlite3_api_routines_hw {
   int (*rekey_v2)(sqlite3*,const char*,const void*,int);
   int (*is_support_binlog)(void);
   int (*replay_binlog)(sqlite3*, sqlite3*);
+#ifdef SQLITE_ENABLE_BINLOG
   int (*clean_binlog)(sqlite3*, BinlogFileCleanModeE);
+#else
+  void *dymmyFunc;
+#endif
 #ifdef SQLITE_ENABLE_PAGE_COMPRESS
   int (*compressdb_backup)(sqlite3*, const char*);
 #else
-- 
2.28.0.windows.1

