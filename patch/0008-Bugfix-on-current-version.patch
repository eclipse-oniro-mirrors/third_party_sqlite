From d96edfb55be3895eb2468ac461772df2855e79b6 Mon Sep 17 00:00:00 2001
From: ryne3366 <zengchuanrui@huawei.com>
Date: Tue, 27 May 2025 16:18:04 +0800
Subject: [PATCH] add corrupt log

---
 src/sqlite3.c | 203 +++++++++++++++++++++++++++++++++++++++++---------
 1 file changed, 168 insertions(+), 35 deletions(-)

diff --git a/src/sqlite3.c b/src/sqlite3.c
index 3ae7a1a..abe918d 100644
--- a/src/sqlite3.c
+++ b/src/sqlite3.c
@@ -57775,6 +57775,8 @@ static void MetaDwrCheckVacuum(BtShared *pBt);
 static int MetaDwrRecoverAndBeginTran(Btree *pBt, int wrflag, int *pSchemaVersion);
 static int MetaDwrOpenAndCheck(Btree *pBt);
 static void MetaDwrDisable(Btree *pBt);
+static void MetaDwrDumpInfo(Pager *pPager);
+static void MetaDwrCommitUpdate(Pager *pPager);
 #define META_HEADER_CHANGED 1
 #define META_SCHEMA_CHANGED 2
 #define META_IN_RECOVERY 1
@@ -59553,11 +59555,12 @@ static int pager_end_transaction(Pager *pPager, int hasSuper, int bCommit){
     sqlite3PcacheTruncate(pPager->pPCache, pPager->dbSize);
   }
 #ifdef SQLITE_META_DWR
-  if (bCommit && pPager->metaChanged != 0) {
-    sqlite3BeginBenignMalloc();
-    (void)MetaDwrWriteHeader(pPager, pPager->metaHdr);
-    sqlite3EndBenignMalloc();
-    pPager->metaChanged = 0;
+  if (bCommit) {
+    MetaDwrCommitUpdate(pPager);
+    if (pPager->metaChanged != 0) {
+      (void)MetaDwrWriteHeader(pPager, pPager->metaHdr);
+      pPager->metaChanged = 0;
+    }
   }
 #endif
   if( pagerUseWal(pPager) ){
@@ -74658,6 +74661,11 @@ static int lockBtree(BtShared *pBt){
     }
     if( nPage>nPageFile ){
       if( sqlite3WritableSchema(pBt->db)==0 ){
+        sqlite3_log(SQLITE_WARNING_DUMP, "sqlite3WritableSchema nPage %d nPageFile %d", nPage, nPageFile);
+#ifdef SQLITE_META_DWR
+        DumpLocksByPager(pBt->pPager);
+        MetaDwrDumpInfo(pBt->pPager);
+#endif
         rc = SQLITE_CORRUPT_BKPT;
         goto page1_init_failed;
       }else{
@@ -121506,8 +121514,8 @@ static void attachFunc(
   if( rc==SQLITE_OK ){
     extern int sqlite3CodecAttach(sqlite3*, int, const void*, int);
     extern void sqlite3CodecGetKey(sqlite3*, int, void**, int*);
-    int nKey;
-    char *zKey;
+    int nKey = 0;
+    char *zKey = NULL;
     int t = sqlite3_value_type(argv[2]);
     switch( t ){
       case SQLITE_INTEGER:
@@ -121524,14 +121532,7 @@ static void attachFunc(
         break;
 
       case SQLITE_NULL:
-        /* No key specified.  Use the key from URI filename, or if none,
-        ** use the key from the main database. */
-        if( sqlite3CodecQueryParameters(db, zName, zPath)==0 ){
-          sqlite3CodecGetKey(db, 0, (void**)&zKey, &nKey);
-          if( nKey || sqlite3BtreeGetRequestedReserve(db->aDb[0].pBt)>0 ){
-            rc = sqlite3CodecAttach(db, db->nDb-1, zKey, nKey);
-          }
-        }
+        /* No key specified. just use null key. */
         break;
     }
   }
@@ -183691,10 +183692,12 @@ opendb_out:
     db->eOpenState = SQLITE_STATE_SICK;
   }
 #ifdef SQLITE_ENABLE_DROPTABLE_CALLBACK
-  db->isDropTable = 0;
-  db->mDropTableName = NULL;
-  db->mDropSchemaName = NULL;
-  db->xDropTableHandle = NULL;
+  if( db!=0 ){
+    db->isDropTable = 0;
+    db->mDropTableName = NULL;
+    db->mDropSchemaName = NULL;
+    db->xDropTableHandle = NULL;
+  }
 #endif /* SQLITE_ENABLE_DROPTABLE_CALLBACK */
 #ifdef SQLITE_ENABLE_BINLOG
   sqlite3BinlogReset(db);
@@ -204144,6 +204147,39 @@ static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){
   return rc;
 }
 
+/*
+** Expression node pExpr is an MSR phrase. This function restarts pExpr
+** so that it is a regular phrase query, not an MSR. SQLITE_OK is returned
+** if successful, or an SQLite error code otherwise.
+*/
+int sqlite3Fts3MsrCancel(Fts3Cursor *pCsr, Fts3Expr *pExpr){
+  int rc = SQLITE_OK;
+  if( pExpr->bEof==0 ){
+    i64 iDocid = pExpr->iDocid;
+    fts3EvalRestart(pCsr, pExpr, &rc);
+    while( rc==SQLITE_OK && pExpr->iDocid!=iDocid ){
+      fts3EvalNextRow(pCsr, pExpr, &rc);
+      if( pExpr->bEof ) rc = FTS_CORRUPT_VTAB;
+    }
+  }
+  return rc;
+}
+
+/*
+** If expression pExpr is a phrase expression that uses an MSR query,
+** restart it as a regular, non-incremental query. Return SQLITE_OK
+** if successful, or an SQLite error code otherwise.
+*/
+static int fts3ExprRestartIfCb(Fts3Expr *pExpr, int iPhrase, void *ctx){
+  TermOffsetCtx *p = (TermOffsetCtx*)ctx;
+  int rc = SQLITE_OK;
+  if( pExpr->pPhrase && pExpr->pPhrase->bIncr ){
+    rc = sqlite3Fts3MsrCancel(p->pCsr, pExpr);
+    pExpr->pPhrase->bIncr = 0;
+  }
+  return rc;
+}
+
 /*
 ** Implementation of offsets() function.
 */
@@ -204180,6 +204216,12 @@ SQLITE_PRIVATE void sqlite3Fts3Offsets(
   sCtx.iDocid = pCsr->iPrevId;
   sCtx.pCsr = pCsr;
 
+  /* If a query restart will be required, do it here, rather than later of
+  ** after pointers to poslist buffers that may be invalidated by a restart
+  ** have been saved.  */
+  rc = sqlite3Fts3ExprIterate(pCsr->pExpr, fts3ExprRestartIfCb, (void*)&sCtx);
+  if( rc!=SQLITE_OK ) goto offsets_out;
+
   /* Loop through the table columns, appending offset information to
   ** string-buffer res for each column.
   */
@@ -254366,7 +254408,20 @@ SQLITE_API int sqlite3_stmt_init(
 /* Return the source-id for this library */
 SQLITE_API const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }
 /************************** End of sqlite3.c ******************************/
-
+#if SQLITE_OS_UNIX
+#include <unistd.h>
+#include <sys/syscall.h>
+static inline int OsGetTid(void)
+{
+#if defined(__linux__)
+    return (int)syscall(__NR_gettid);
+#elif defined(__APPLE__)
+    return (int)syscall(SYS_thread_selfid);
+#else
+    return 0;
+#endif
+}
+#endif
 #ifdef SQLITE_HAS_CODEC
 /************** Begin file hw_codec_openssl.h *******************************/
 #ifndef EXPOSE_INTERNAL_FUNC
@@ -256014,7 +256069,12 @@ typedef struct MetaDwrHdr {
   u32 pageSz;
   u32 pageCnt;
   u64 dbFileInode;
-  u32 reserved[12];
+  u64 walShmFileIno;
+  u64 updateTimeStamp;
+  int updateTid;
+  int updatePid;
+  u32 walFrameCksum[2];
+  u32 reserved[4];
   u32 checkSum;
   u8 *zones;
   Pgno *pages;
@@ -256369,6 +256429,87 @@ static inline u64 CaculateMetaDwrWriteOffset(int pageSz, u32 idx, u8 zone) {
   return META_DWR_HEADER_PAGE_SIZE + pageSz * (idx * 2 + zone);
 }
 
+static void MetaDwrDumpInfo(Pager *pPager)
+{
+  MetaDwrHdr *hdr = pPager->metaHdr;
+  if (hdr != NULL) {
+    sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr dbSize %u mxFrameInWal %u dbIno %lu walShmIno %lu",
+      hdr->dbSize, hdr->mxFrameInWal, hdr->dbFileInode, hdr->walShmFileIno);
+    sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr updatestamp %ld updatetid %d updatepid %d",
+      hdr->updateTimeStamp, hdr->updateTid, hdr->updatePid);
+    sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr ckSum0 %u ckSum1 %u", hdr->walFrameCksum[0], hdr->walFrameCksum[1]);
+  }
+#ifndef SQLITE_OMIT_WAL
+  if (!pagerUseWal(pPager)) {
+    sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr ignore dump wal info");
+    return;
+  }
+  WalIndexHdr *pWalHdr = &pPager->pWal->hdr;
+  sqlite3_log(SQLITE_WARNING_DUMP, "wal ckSum0 %u ckSum1 %u maxFram %u nPage %u", pWalHdr->aFrameCksum[0],
+    pWalHdr->aFrameCksum[1], pWalHdr->mxFrame, pWalHdr->nPage);
+#if SQLITE_OS_UNIX
+  if (hdr == NULL || !hdr->checkFileId) {
+    return;
+  }
+  unixFile *fd = (unixFile *)pPager->fd;
+  if (fd == NULL || fd->pInode == NULL) {
+    sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr dump invalid db fd");
+    return;
+  }
+  if (fd->pShm == NULL || fd->pShm->pShmNode == NULL || fd->pShm->pShmNode->hShm < 0) {
+    sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr dump invalid shm fd");
+    return;
+  }
+  struct stat sStat;
+  if (osFstat(fd->pShm->pShmNode->hShm, &sStat)) {
+    sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr dump shm stat go wrong %d", errno);
+    return;
+  }
+  sqlite3_log(SQLITE_WARNING_DUMP, "MetaDwr shm ino %lld", (i64)sStat.st_ino);
+#endif
+#endif
+}
+
+static void MetaDwrCommitUpdate(Pager *pPager)
+{
+#if SQLITE_OS_UNIX
+  MetaDwrHdr *hdr = pPager->metaHdr;
+  if (hdr == NULL) {
+    return;
+  }
+  hdr->updateTid = OsGetTid();
+  hdr->updatePid = osGetpid();
+  struct timeval time;
+  gettimeofday(&time, NULL);
+  hdr->updateTimeStamp = time.tv_sec * 1000 + time.tv_usec / 1000;
+#ifndef SQLITE_OMIT_WAL
+  if (pagerUseWal(pPager)) {
+    WalIndexHdr *pWalHdr = &pPager->pWal->hdr;
+    if (pWalHdr->isInit) {
+      hdr->walFrameCksum[0] = pWalHdr->aFrameCksum[0];
+      hdr->walFrameCksum[1] = pWalHdr->aFrameCksum[1];
+    }
+  }
+#endif
+#if !defined(NDEBUG)
+  if (!hdr->checkFileId) {
+    return;
+  }
+  if (fd == NULL || fd->pShm == NULL || fd->pShm->pShmNode == NULL || fd->pShm->pShmNode->hShm < 0) {
+    sqlite3_log(SQLITE_WARNING_DUMP, "update meta header invalid shm fd");
+    return;
+  }
+  struct stat sStat;
+  if (osFstat(fd->pShm->pShmNode->hShm, &sStat)) {
+    hdr->walShmFileIno = 0;
+    sqlite3_log(SQLITE_WARNING_DUMP, "update meta header stat go wrong %d", errno);
+    return;
+  }
+  hdr->walShmFileIno = sStat.st_ino;
+#endif
+#endif
+}
+
 static void MetaDwrUpdateHeaderDbInfo(BtShared *pBt) {
   MetaDwrHdr *hdr = pBt->pPager->metaHdr;
   // 28 offset: dbSize, freelist pageNo, freelist pages count, schema cookie
@@ -257055,19 +257196,6 @@ static void MetaDwrDisable(Btree *pBt)
 }
 #endif
 #if SQLITE_OS_UNIX
-#include <unistd.h>
-#include <sys/syscall.h>
-static inline int OsGetTid(void)
-{
-#if defined(__linux__)
-    return (int)syscall(__NR_gettid);
-#elif defined(__APPLE__)
-    return (int)syscall(SYS_thread_selfid);
-#else
-    return 0;
-#endif
-}
-
 static void ResetLockStatus(void)
 {
   (void)memset(&g_lockStatus, 0, sizeof(g_lockStatus));
@@ -257171,8 +257299,13 @@ static inline const char *FlockToName(int l_type)
 
 static int DumpProcessLocks(int fd, struct flock *lock, const char *lockName, char *dumpBuf, int bufLen)
 {
+#ifdef F_OFD_GETLK
+  int lkType = F_OFD_GETLK;
+#else
+  int lkType = F_GETLK;
+#endif
   dumpBuf[0] = '\0';
-  if (osFcntl(fd, F_GETLK, lock) != SQLITE_OK) {
+  if (osFcntl(fd, lkType, lock) != SQLITE_OK) {
     sqlite3_log(SQLITE_ERROR, "[SQLite]Get wal file lock ofs %u failed, errno: %d", lock->l_start, errno);
     return 0;
   }
-- 
2.34.1

