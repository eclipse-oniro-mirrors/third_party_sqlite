From f8ebccc3bc248e080e1343315fa5b9d0b399dab8 Mon Sep 17 00:00:00 2001
From: Liu Hongyang <liuhongyang4@huawei.com>
Date: Sat, 17 May 2025 16:04:21 +0800
Subject: [PATCH] BugFix-CurrVersion

---
 src/sqlite3.c | 107 +++++++++++++++++++++++++++++++++-----------------
 1 file changed, 72 insertions(+), 35 deletions(-)

diff --git a/src/sqlite3.c b/src/sqlite3.c
index 8dddbf6..777d1b1 100644
--- a/src/sqlite3.c
+++ b/src/sqlite3.c
@@ -43480,6 +43480,9 @@ static int unixOpen(
         flags |= SQLITE_OPEN_READONLY;
         openFlags |= O_RDONLY;
         isReadonly = 1;
+#ifdef LOG_DUMP
+        sqlite3_log(SQLITE_WARNING, "Try open file readonly sysno %d", errno);
+#endif
         fd = robust_open(zName, openFlags, openMode);
       }
     }
@@ -57259,6 +57262,9 @@ static int jrnlBufferSize(Pager *pPager){
 ** and debugging only.
 */
 #ifdef SQLITE_CHECK_PAGES
+#ifndef SQLITE_MIN_CHECK_PAGE_SIZE
+#define SQLITE_MIN_CHECK_PAGE_SIZE 4096
+#endif
 #if defined (__arm__) || defined (__aarch64__)
 #include <arm_neon.h>
 u32 deep_fast_hash_arm(void *src, int srcLen){
@@ -57327,6 +57333,9 @@ static u32 pager_pagehash(PgHdr *pPage){
   return pager_datahash(pPage->pPager->pageSize, (unsigned char *)pPage->pData);
 }
 static void pager_set_pagehash(PgHdr *pPage){
+  if( pPage->pPager->pageSize<SQLITE_MIN_CHECK_PAGE_SIZE ) {
+    return;
+  }
   pPage->pageHash = pager_pagehash(pPage);
 }
 
@@ -57338,10 +57347,7 @@ static void pager_set_pagehash(PgHdr *pPage){
 #define CHECK_PAGE(x) checkPage(x)
 static void checkPage(PgHdr *pPg){
   Pager *pPager = pPg->pPager;
-  if( pPager->eState==PAGER_ERROR ){
-    return;
-  }
-  if( pPg->flags&PGHDR_DIRTY ) {
+  if( pPager->pageSize<SQLITE_MIN_CHECK_PAGE_SIZE || pPager->eState==PAGER_ERROR || pPg->flags&PGHDR_DIRTY ) {
     return;
   }
   if( pPg->pgno!=1 && pPg->pageHash!=pager_pagehash(pPg) ){
@@ -58502,9 +58508,11 @@ static int pager_playback_one_page(
     ** file.  */
 #ifdef SQLITE_HAS_CODEC
     if( !jrnlEnc ){
-      CODEC2(pPager, aData, pgno, 7, rc=SQLITE_NOMEM_BKPT, aData);
-      rc = sqlite3OsWrite(pPager->fd, (u8 *)aData, pPager->pageSize, ofst);
-      CODEC1(pPager, aData, pgno, 3, rc=SQLITE_NOMEM_BKPT);
+      CODEC2(pPager, aData, pgno, 7, rc=pPager->errCode, aData);
+      if (rc == SQLITE_OK) {
+        rc = sqlite3OsWrite(pPager->fd, (u8 *)aData, pPager->pageSize, ofst);
+        CODEC1(pPager, aData, pgno, 3, rc=pPager->errCode);
+      }
     }else
 #endif /* SQLITE_HAS_CODEC */
     rc = sqlite3OsWrite(pPager->fd, (u8 *)aData, pPager->pageSize, ofst);
@@ -58515,9 +58523,11 @@ static int pager_playback_one_page(
     if( pPager->pBackup ){
 #ifdef SQLITE_HAS_CODEC
       if( jrnlEnc ){
-        CODEC1(pPager, aData, pgno, 3, rc=SQLITE_NOMEM_BKPT);
-        sqlite3BackupUpdate(pPager->pBackup, pgno, (u8*)aData);
-        CODEC2(pPager, aData, pgno, 7, rc=SQLITE_NOMEM_BKPT,aData);
+        CODEC1(pPager, aData, pgno, 3, rc=pPager->errCode);
+        if (rc == SQLITE_OK) {
+          sqlite3BackupUpdate(pPager->pBackup, pgno, (u8*)aData);
+          CODEC2(pPager, aData, pgno, 7, rc=pPager->errCode, aData);
+        }
       }else
 #endif /* SQLITE_HAS_CODEC */
       sqlite3BackupUpdate(pPager->pBackup, pgno, (u8*)aData);
@@ -58572,7 +58582,7 @@ static int pager_playback_one_page(
     }
 #if SQLITE_HAS_CODEC
     /* Decode the page just read from disk */
-    if( jrnlEnc ){ CODEC1(pPager, pData, pPg->pgno, 3, rc=SQLITE_NOMEM_BKPT); }
+    if( jrnlEnc ){ CODEC1(pPager, pData, pPg->pgno, 3, rc=pPager->errCode); }
 #endif /* SQLITE_HAS_CODEC */
     sqlite3PcacheRelease(pPg);
   }
@@ -59150,7 +59160,7 @@ static int readDbPage(PgHdr *pPg){
       memcpy(&pPager->dbFileVers, dbFileVers, sizeof(pPager->dbFileVers));
     }
   }
-  CODEC1(pPager, pPg->pData, pPg->pgno, 3, rc = SQLITE_NOMEM_BKPT);
+  CODEC1(pPager, pPg->pData, pPg->pgno, 3, rc = pPager->errCode);
 
   PAGER_INCR(sqlite3_pager_readdb_count);
   PAGER_INCR(pPager->nRead);
@@ -59314,6 +59324,9 @@ static int pagerWalFrames(
   }
 
 #ifdef SQLITE_CHECK_PAGES
+  if( pPager->pageSize<SQLITE_MIN_CHECK_PAGE_SIZE ) {
+    return rc;
+  }
   pList = sqlite3PcacheDirtyList(pPager->pPCache);
   for(p=pList; p; p=p->pDirty){
     pager_set_pagehash(p);
@@ -60557,7 +60570,7 @@ static int pager_write_pagelist(Pager *pPager, PgHdr *pList){
       assert( (pList->flags&PGHDR_NEED_SYNC)==0 );
       if( pList->pgno==1 ) pager_write_changecounter(pList);
 
-      CODEC2(pPager, pList->pData, pgno, 6, return SQLITE_NOMEM_BKPT, pData);
+      CODEC2(pPager, pList->pData, pgno, 6, return pPager->errCode, pData);
 
       /* Write out the page data. */
       rc = sqlite3OsWrite(pPager->fd, pData, pPager->pageSize, offset);
@@ -60648,7 +60661,7 @@ static int subjournalPage(PgHdr *pPg){
       char *pData2;
 #if SQLITE_HAS_CODEC
       if( !pPager->subjInMemory ){
-        CODEC2(pPager, pData, pPg->pgno, 7, return SQLITE_NOMEM_BKPT, pData2);
+        CODEC2(pPager, pData, pPg->pgno, 7, return pPager->errCode, pData2);
       }else
 #endif /* SQLITE_HAS_CODEC */
       pData2 = pData;
@@ -62109,7 +62122,7 @@ static SQLITE_NOINLINE int pagerAddPageToRollbackJournal(PgHdr *pPg){
   assert( pPg->pgno!=PAGER_SJ_PGNO(pPager) );
 
   assert( pPager->journalHdr<=pPager->journalOff );
-  CODEC2(pPager, pPg->pData, pPg->pgno, 7, return SQLITE_NOMEM_BKPT, pData2);
+  CODEC2(pPager, pPg->pData, pPg->pgno, 7, return pPager->errCode, pData2);
   cksum = pager_cksum(pPager, (u8*)pData2);
 
   /* Even if an IO or diskfull error occurs while journalling the
@@ -62474,7 +62487,7 @@ static int pager_incr_changecounter(Pager *pPager, int isDirectMode){
       if( DIRECT_MODE ){
         const void *zBuf;
         assert( pPager->dbFileSize>0 );
-        CODEC2(pPager, pPgHdr->pData, 1, 6, rc=SQLITE_NOMEM_BKPT, zBuf);
+        CODEC2(pPager, pPgHdr->pData, 1, 6, rc=pPager->errCode, zBuf);
         if( rc==SQLITE_OK ){
           rc = sqlite3OsWrite(pPager->fd, zBuf, pPager->pageSize, 0);
           pPager->aStat[PAGER_STAT_WRITE]++;
@@ -246012,7 +246025,7 @@ CODEC_STATIC int sqlite3CodecDecryptData(CodecContext *ctx, OperateContext which
     if(sqlite3CodecCheckHmac(keyCtx, pgno, inputBuffer.bufferSize + keyCtx->codecConst.initVectorSize, input, input + inputBuffer.bufferSize + keyCtx->codecConst.initVectorSize)){
       sqlite3_log(SQLITE_ERROR, "codec: check hmac error at page %d, hmac %d, kdf %d, pageSize %d, iter %d.",
         pgno, keyCtx->codecConst.hmacAlgo, keyCtx->codecConst.kdfAlgo, keyCtx->codecConst.cipherPageSize, keyCtx->iter);
-      return SQLITE_ERROR;
+      return pgno == 1 ? SQLITE_NOTADB : SQLITE_CORRUPT;
     }
     unsigned char *initVector = input + inputBuffer.bufferSize;
     void *cipherCtx = opensslGetCtx(keyCtx->codecConst.cipher, CODEC_OPERATION_DECRYPT, keyCtx->key, initVector);
@@ -246035,7 +246048,7 @@ void* sqlite3Codec(void *ctx, void *data, Pgno pgno, int mode){
   int rc = SQLITE_OK;
   errno_t memcpyRc = EOK;
   if(ctx == NULL || data == NULL){
-    return pData;
+    return NULL;
   }
   if(pgno == 1){
     offset = FILE_HEADER_SIZE;
@@ -246049,12 +246062,13 @@ void* sqlite3Codec(void *ctx, void *data, Pgno pgno, int mode){
         memcpyRc = memcpy_s(pCtx->buffer, cipherPageSize, SQLITE_FILE_HEADER, FILE_HEADER_SIZE);
         if(memcpyRc != EOK){
           sqlite3CodecSetError(pCtx, SQLITE_ERROR);
-          return pData;
+          return NULL;
         }
       }
       rc = sqlite3CodecDecryptData(pCtx, OPERATE_CONTEXT_READ, pgno, cipherPageSize - offset, (unsigned char *)(pData + offset), pCtx->buffer + offset);
       if(rc != SQLITE_OK){
         sqlite3CodecSetError(pCtx, rc);
+        return NULL;
       }
       (void)memcpy_s(pData, cipherPageSize, pCtx->buffer, cipherPageSize);
       return pData;
@@ -246064,13 +246078,13 @@ void* sqlite3Codec(void *ctx, void *data, Pgno pgno, int mode){
         memcpyRc = memcpy_s(pCtx->buffer, cipherPageSize, pCtx->salt, FILE_HEADER_SIZE);
         if(memcpyRc != EOK){
           sqlite3CodecSetError(pCtx, SQLITE_ERROR);
-          return pData;
+          return NULL;
         }
       }
       rc = sqlite3CodecEncryptData(pCtx, OPERATE_CONTEXT_WRITE, pgno, cipherPageSize - offset, (unsigned char *)(pData + offset), pCtx->buffer + offset);
       if(rc != SQLITE_OK){
         sqlite3CodecSetError(pCtx, rc);
-        return pData;
+        return NULL;
       }
       return pCtx->buffer;
       break;
@@ -246085,12 +246099,12 @@ void* sqlite3Codec(void *ctx, void *data, Pgno pgno, int mode){
       rc = sqlite3CodecEncryptData(pCtx, OPERATE_CONTEXT_READ, pgno, cipherPageSize - offset, (unsigned char *)(pData + offset), pCtx->buffer + offset);
       if(rc != SQLITE_OK){
         sqlite3CodecSetError(pCtx, rc);
-        return pData;
+        return NULL;
       }
       return pCtx->buffer;
       break;
     default:
-      return pData;
+      return NULL;
       break;
   }
 }
@@ -246701,7 +246715,7 @@ static int PragmaMetaDoubleWrie(sqlite3 *db, int iDb, Parse *parse, const char *
     sqlite3_mutex_enter(db->mutex);
     // only support enabled meta double write
     int rc = MetaDwrOpenAndCheck(pBt);
-    if (rc != SQLITE_OK) {
+    if (rc != SQLITE_OK && rc != SQLITE_PERM) {
       parse->nErr++;
       parse->rc = rc;
     }
@@ -247111,7 +247125,7 @@ static int MetaDwrWriteOnePage(Btree *pBt, PgHdr *pPage, MetaDwrHdr *hdr, u8 cur
   void *pData;
 #if defined(SQLITE_HAS_CODEC)
   if ((pData = sqlite3PagerCodec(pPage)) == 0)
-    return SQLITE_NOMEM;
+    return pPager->errCode;
 #else
   pData = pPage->pData;
 #endif
@@ -247157,6 +247171,29 @@ static inline const char *GetMetaFilePath(Pager *pPager)
   return pPager->metaFd == NULL ? NULL : ((const char *)pPager->metaFd + ROUND8(pPager->pVfs->szOsFile));
 }
 
+static int MetaDwrCheckPerm(sqlite3_vfs *pVfs, u8 openCreate, char *metaPath) {
+  int exists = 0;
+  int rc = sqlite3OsAccess(pVfs, metaPath, SQLITE_ACCESS_EXISTS, &exists);
+  if (rc != SQLITE_OK) {
+    return rc;
+  }
+  if (!exists && !openCreate) {
+    return SQLITE_PERM;
+  }
+#ifdef HARMONY_OS
+  // check if the path have enough permission
+  rc = osAccess(metaPath, W_OK|R_OK);
+  if (rc == 0 || errno == ENOENT) {
+    return SQLITE_OK;
+  }
+  rc = SQLITE_PERM;
+  if (openCreate) {
+    sqlite3_log(SQLITE_WARNING_DUMP, "Meta double write disabled, sysno %d", errno);
+  }
+#endif
+  return rc;
+}
+
 static int MetaDwrOpenFile(Pager *pPager, u8 openCreate) {
   if (pPager->metaFd || pPager->zFilename == NULL) {
     return SQLITE_OK;
@@ -247173,15 +247210,10 @@ static int MetaDwrOpenFile(Pager *pPager, u8 openCreate) {
     return SQLITE_NOMEM_BKPT;
   }
   sqlite3_snprintf(size, metaPath, "%s-dwr", pPager->zFilename);
-  int exists = 0;
-  int rc = sqlite3OsAccess(pVfs, metaPath, SQLITE_ACCESS_EXISTS, &exists);
+  int rc = MetaDwrCheckPerm(pVfs, openCreate, metaPath);
   if (rc != SQLITE_OK) {
     goto INIT_META_OUT;
   }
-  if (!exists && !openCreate) {
-    sqlite3_free(metaFd);
-    goto INIT_META_OUT;
-  }
   u32 flags = (SQLITE_OPEN_READWRITE | SQLITE_OPEN_SUPER_JOURNAL);
   if (openCreate) {
     flags |= SQLITE_OPEN_CREATE;
@@ -247269,7 +247301,7 @@ static int MetaDwrLoadAndCheckMetaFile(BtShared *pBt, u8 reportErr) {
 static int MetaDwrReadOnePage(Pager *pPager, MetaDwrHdr *hdr, int idx, u8 *pData) {
   u64 ofs = CaculateMetaDwrWriteOffset(pPager->pageSize, idx, hdr->zones[idx]);
   int rc = sqlite3OsRead(pPager->metaFd, pData, pPager->pageSize, ofs);
-  CODEC1(pPager, pData, hdr->pages[idx], 3, rc = SQLITE_NOMEM_BKPT);
+  CODEC1(pPager, pData, hdr->pages[idx], 3, rc = pPager->errCode);
   return rc;
 }
 
@@ -247894,11 +247926,16 @@ static void walLogCheckpointInfo(Wal *pWal, sqlite3 *db, sqlite3_int64 startTime
   sqlite3_int64 endTime;
   sqlite3OsCurrentTimeInt64(db->pVfs, &endTime);
   sqlite3_int64 timeUse = endTime - startTime;
+  static sqlite3_int64 lastDumpTime = 0;
+  static sqlite3_int64 ckptCnt = 0;
   /* Only when timeUse > 1500ms or wal size > 50MB, default pageSize 4K, 50*1024/4 = 12800 */
-  if (timeUse > 1500 || pWal->hdr.mxFrame > 12800) {
-    sqlite3_log(SQLITE_WARNING_DUMP, "[SQLite]Wal ckpt use time: %lld(ms), wal frame: %u",
-                timeUse, pWal->hdr.mxFrame);
+  if (timeUse > 1500 || (pWal->hdr.mxFrame > 12800 && (lastDumpTime - endTime) > 2000)) {
+    sqlite3_log(SQLITE_WARNING_DUMP, "[SQLite]Wal try ckpt count %d use time: %lld(ms), wal frame: %u",
+                ckptCnt, timeUse, pWal->hdr.mxFrame);
+    lastDumpTime = endTime;
+    ckptCnt = 0;
   }
+  ckptCnt++;
 }
 #endif
 #ifdef SQLITE_ENABLE_BINLOG
-- 
2.25.1

